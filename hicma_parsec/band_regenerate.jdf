extern "C" %{
/**
 * @copyright (c) 2020 King Abdullah University of Science and Technology (KAUST).
 *                     The Universiy of Tennessee and The Universiy of Tennessee Research Foundation.
 *                     All rights reserved.
 **/

#include "hicma_parsec.h"

%}

/* Globals
 */
uplo            [ type = int ]
descA           [ type = "parsec_tiled_matrix_dc_t*" ]
problem_data    [ type = "void *" ]
problem_kernel  [ type = "STARSH_kernel *" ]
problem_index   [ type = "STARSH_int *" ]
band_size       [ type = "int" ] 

/**************************************************
 *            generate band tiles                 *
 **************************************************/
generate_band(m, n)

// Execution space
m = 0 .. descA->mt-1
n = %{ return parsec_imax(m-band_size+1, 0); %} .. m

// Parallel partitioning
:descA(m, n)

READ D <- descA(m, n) 

BODY
{
    int ldd = BLKLDD(descA, m);
    int tempmm = m == descA->mt-1 ? descA->m - m * descA->mb : descA->mb;
    int tempnn = tempmm;

    /* New data_copy and allocate memory on band if not allocated */
#if !BAND_MEMORY_CONTIGUOUS
    this_task->data._f_D.data_out = parsec_data_copy_new(data_of_descA(m, n), 0);
    this_task->data._f_D.data_out->device_private = calloc(descA->mb * descA->mb, sizeof(double));
#endif

    /* Generate tiles */
    problem_kernel(tempmm, tempnn, problem_index + m*descA->mb,
            problem_index + n*descA->mb, problem_data, problem_data,
            this_task->data._f_D.data_out->device_private, ldd);

    if(HICMA_get_print_index() == 1){
        printf("band_regenerate %d+DIAG\t|AD(%d,%d) m:%d lda(11):%d\n", 0, m, n, tempmm, ldd);
    }

    if(HICMA_get_print_mat() == 1){
        printf("band_regenerate %d\tdiag-output A\n", __LINE__);
        _printmat(D, tempmm, tempmm, ldd);
    }
}
END

extern "C" %{

/**
 * Generate tile on band 
 *
 * @param [in] uplo:         PlasmaLower 
 * @param [inout] dcA:       the data, already distributed and allocated
 * @param [in] data:         data in generate tiles 
 * @param [in] kernel:       kernels in generate matrix 
 * @param [in] index:        index in generate matrix 
 * @param [in] band_size:    band size 
 * @return the parsec object to schedule
 */
parsec_taskpool_t*
band_regenerate_New(int uplo,
             parsec_tiled_matrix_dc_t *A,
             void *data,
             STARSH_kernel *kernel,
             STARSH_int *index,
             int band_size)
{
    parsec_arena_t* default_arena;

    /* Check input arguments */
    if( uplo != PlasmaLower ) {
        dplasma_error("STARSH_appr_New", "illegal value of uplo");
        return NULL /*-1*/;
    }

    parsec_band_regenerate_taskpool_t *band_regenerate =
        parsec_band_regenerate_new(uplo, A, data, kernel, index, band_size);

    parsec_matrix_add2arena(&band_regenerate->arenas_datatypes[PARSEC_band_regenerate_DEFAULT_ARENA],
                            parsec_datatype_double_t, matrix_UpperLower,
                            1, A->mb, A->nb, A->mb,
                            PARSEC_ARENA_ALIGNMENT_SSE, -1 );
    return (parsec_taskpool_t*)band_regenerate;
}

/* Destructor */
void band_regenerate_Destruct(parsec_taskpool_t *taskpool)
{
    parsec_band_regenerate_taskpool_t *band_regenerate_taskpool = (parsec_band_regenerate_taskpool_t *)taskpool;
    parsec_matrix_del2arena(&band_regenerate_taskpool->arenas_datatypes[PARSEC_band_regenerate_DEFAULT_ARENA]);
    parsec_taskpool_free(taskpool);
}

/**
 * Generate tile on band
 *
 * @param [in] parsec:       parsec context 
 * @param [in] uplo:         support PlasmaLower now
 * @param [inout] dcA:       the data, already distributed and allocated
 * @param [in] data:         data in generate tiles
 * @param [in] kernel:       kernels in generate matrix
 * @param [in] index:        index in generate matrix  
 * @param [in] band_size:    band size
 */
int parsec_band_regenerate( parsec_context_t *parsec,
                int uplo,
                parsec_tiled_matrix_dc_t *dcA,
                void *data,
                STARSH_kernel *kernel,
                STARSH_int *index,
                int band_size)
{
    parsec_taskpool_t *parsec_band_regenerate = NULL;

    parsec_band_regenerate = band_regenerate_New(
             uplo, dcA, data, kernel, index, band_size);

    parsec_context_add_taskpool(parsec, parsec_band_regenerate);
    parsec_context_start(parsec);
    parsec_context_wait(parsec);
    band_regenerate_Destruct(parsec_band_regenerate);

    return 0;
}

%}
