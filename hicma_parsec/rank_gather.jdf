extern "C" %{
/**
 * @copyright (c) 2020 King Abdullah University of Science and Technology (KAUST).
 *                     The Universiy of Tennessee and The Universiy of Tennessee Research Foundation.
 *                     All rights reserved.
 **/
#include "hicma_parsec.h"

%}

/** Gather from dcAr to rank_array 
*/
descAr         [ type = "parsec_tiled_matrix_dc_t *" ]
rank_array    [ type = "int *" ]
band_size     [ type = "int" ]
num_col       [ type = "int" hidden=on default="((two_dim_block_cyclic_t *)descAr)->grid.cols * ((two_dim_block_cyclic_t *)descAr)->grid.kcols" ]
NT            [ type = "int" hidden=on default="(descAr->lnt-1)/num_col" ]

/**************************************************
 *                   my_task                      *
 **************************************************/
my_task(m, n)

m = band_size .. descAr->mt-1
n = 0 .. m-band_size

: descAr(m, n)

READ Y <- descAr(m, n)


BODY
{
    rank_array[n*descAr->lmt+m] = *((int *)Y);
}
END

extern "C" %{

/**
 * @brief New function
 *
 * @param [in] Ar: the data, already distributed and allocated
 * @param [in] rank_array: array of rank 
 * @param [in] band_size: band size 
 * @return the parsec object to schedule.
 */
parsec_taskpool_t*
parsec_rank_gather_New(parsec_tiled_matrix_dc_t *dcAr, int *rank_array, int band_size)
{
    parsec_taskpool_t* rank_gather_taskpool;
    parsec_rank_gather_taskpool_t* taskpool = NULL;

    taskpool = parsec_rank_gather_new(dcAr, rank_array, band_size);
    rank_gather_taskpool = (parsec_taskpool_t*)taskpool;

    parsec_matrix_add2arena(taskpool->arenas[PARSEC_rank_gather_DEFAULT_ARENA],
                            parsec_datatype_int_t, matrix_UpperLower,
                            1, 1, 1, 1,
                            PARSEC_ARENA_ALIGNMENT_SSE, -1 );

    return rank_gather_taskpool;
}

/**
 * @param [inout] the parsec object to destroy
 */
void parsec_rank_gather_Destruct(parsec_taskpool_t *taskpool)
{
    parsec_rank_gather_taskpool_t *rank_gather_taskpool = (parsec_rank_gather_taskpool_t *)taskpool;
    parsec_matrix_del2arena(rank_gather_taskpool->arenas[PARSEC_rank_gather_DEFAULT_ARENA]);
    parsec_taskpool_free(taskpool);
}

/**
 * @brief Gather dcAr to rank_array 
 *
 * @param [in] dcAr: the data, already distributed and allocated
 * @param [in] rank_array: array of rank 
 * @param [in] band_size: band size 
 */
int parsec_rank_gather(parsec_context_t *parsec,
		parsec_tiled_matrix_dc_t *dcAr,
		int *rank_array,
		int band_size)
{
    parsec_taskpool_t *parsec_rank_gather = NULL;

    if( dcAr->mb != 1 || dcAr->nb != 1 ) {
        if( 0 == dcAr->super.myrank )
            fprintf(stderr, "ERROR: Only gather rank in Ar\n");
        return PARSEC_ERR_BAD_PARAM;
    }
   
    /* A tempory buff to gather rank info for each process, initializing to -1 */ 
    int *rank_array_tmp = (int *)calloc(dcAr->lm * dcAr->ln, sizeof(int) );
    memset(rank_array_tmp, -1, dcAr->lmt * dcAr->lnt * sizeof(int));
    
    parsec_rank_gather = parsec_rank_gather_New( dcAr, rank_array_tmp, band_size );

    parsec_context_add_taskpool(parsec, parsec_rank_gather);
    parsec_context_start(parsec);
    parsec_context_wait(parsec);
    parsec_rank_gather_Destruct(parsec_rank_gather);

    /* Call MPI_Allreduce to reduce rank_array */
    MPI_Allreduce( rank_array_tmp, rank_array, dcAr->lm * dcAr->ln, MPI_INT, MPI_SUM, MPI_COMM_WORLD ); 

    return 0;
}

%}
