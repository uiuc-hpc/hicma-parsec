extern "C" %{
/**
 * @copyright (c) 2020 King Abdullah University of Science and Technology (KAUST).
 *                     The Universiy of Tennessee and The Universiy of Tennessee Research Foundation.
 *                     All rights reserved.
 **/

#include "hicma_parsec.h"

%}

/** Check the rank correctness and set -1 to tile on band
 */
descAr          [ type = "parsec_tiled_matrix_dc_t*" ]
band_size       [ type = "int" ]

/**************************************************
 **************************************************/
off_band(m, n)

// Execution space
m = band_size .. descAr->mt-1
n = 0 .. m-band_size

// Parallel partitioning
:descAr(m, n)

// Parameters
READ Ar <- descAr(m, n) 

BODY
{
    if( ((int *)Ar)[0] < 0 && n < m )
        fprintf(stderr, "ERROR rank of (%d, %d) : %d\n", m, n, ((int *)Ar)[0]);
}
END

/**************************************************
 **************************************************/
on_band(m, n)

// Execution space
m = 0 .. descAr->mt-1
n = %{ return parsec_imax(m-band_size+1, 0); %} .. m

// Parallel partitioning
:descAr(m, n)

// Parameters
RW Ar <- descAr(m, n)
      -> descAr(m, n)

BODY
{
    /* Set on band rank to -1 */
    ((int *)Ar)[0] = -1; 
}
END


extern "C" %{

/**
 * Check rank correctness and set -1 to tiles on band 
 *
 * @param [inout] dcAr:      the rank data, already distributed and allocated
 * @param [in] band_size:    band size
 * @return the parsec object to schedule.
 */
parsec_taskpool_t*
parsec_rank_check_New(parsec_tiled_matrix_dc_t *dcAr,
		int band_size)
{
    parsec_rank_check_taskpool_t* taskpool = NULL;
    taskpool = parsec_rank_check_new(dcAr, band_size);
    parsec_matrix_add2arena(taskpool->arenas[PARSEC_rank_check_DEFAULT_ARENA],
                            parsec_datatype_int_t, matrix_UpperLower,
                            1, dcAr->mb, dcAr->nb, dcAr->mb,
                            PARSEC_ARENA_ALIGNMENT_SSE, -1 );
    return (parsec_taskpool_t*)taskpool; 
}

/**
 * @param [inout] the parsec object to destroy
*/
void parsec_rank_check_Destruct(parsec_taskpool_t *taskpool)
{
    parsec_rank_check_taskpool_t *rank_check_taskpool = (parsec_rank_check_taskpool_t *)taskpool;
    parsec_matrix_del2arena(rank_check_taskpool->arenas[PARSEC_rank_check_DEFAULT_ARENA]);
    parsec_taskpool_free(taskpool);
}

/**
 * Check rank correctness and set -1 to tiles on band
 *
 * @param [in] parsec:       parsec context
 * @param [inout] dcAr:      the rank data, already distributed and allocated
 * @param [in] band_size:    band size
 */
int parsec_rank_check(parsec_context_t *parsec,
                      parsec_tiled_matrix_dc_t *dcAr,
		      int band_size)
{
    parsec_taskpool_t *parsec_rank_check = NULL;
 
    parsec_rank_check = parsec_rank_check_New(dcAr, band_size);

    if( parsec_rank_check != NULL ){
        parsec_context_add_taskpool(parsec, parsec_rank_check);
        parsec_context_start(parsec);
        parsec_context_wait(parsec);
        parsec_rank_check_Destruct(parsec_rank_check);
    }

    return 0;
}

%}
